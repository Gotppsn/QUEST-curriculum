// Initalize prime number list with seive
const PRIMES = Array(999999).fill(false);
(function initPrimes(num) {
  const upper = Math.floor((num - 1) / 2);
  const isPrime = Array(upper).fill(true);
  const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);
  for (let i = 0; i <= sqrtUpper; i++) {
    if (isPrime[i]) {
      // Mark value in PRIMES array
      const prime = 2 * i + 3;
      PRIMES[prime] = true;
      // Mark all multiples of this number as false (not prime)
      const primeSqaredIndex = 2 * i ** 2 + 6 * i + 3;
      for (let j = primeSqaredIndex; j < upper; j += prime)
        isPrime[j] = false;
    }
  }
  for (let i = sqrtUpper + 1; i < upper; i++) {
    if (isPrime[i])
      PRIMES[2 * i + 3] = true;
  }
})(999999);

function isCircularPrime(n) {
  const nString = n.toString();
  return nString
    .split("")
    .every(
      (_, index) => PRIMES[nString.slice(index) + nString.slice(0, index)]
    );
}

function circularPrimes(n) {
  if (n < 2)
    return 0;
  let count = 1;
  for (let i = 3; i < n; i += 2) {
    if (isCircularPrime(i))
      count++;
  }
  return count;
}

circularPrimes(1000000);